#version 330 core

#define MAX_LIGHTS 20

out vec4 FragColor;

struct spotLight {
	vec3 position;
	vec3 direction;
	float angle;
	float outerAngle;
	vec4 colour;
	vec3 attenuation;
};

struct pointLight {
	vec3 position;
	vec4 colour;
	vec3 attenuation;
};

struct dirLight {
	vec3 position;
	vec4 colour;
	vec3 direction;
	vec3 attenuation;
};

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;

uniform int spotLightCount;
uniform spotLight SLights[MAX_LIGHTS];

uniform int pointLightCount;
uniform pointLight PLights[MAX_LIGHTS];

uniform int dirLightCount;
uniform dirLight DLights[MAX_LIGHTS];

uniform vec4 DifCol;
uniform vec4 SpecCol;

uniform sampler2D DifTex;
uniform sampler2D SpecTex;

uniform float shininess;

vec4 matDiffuse;
vec4 matSpecular;

uniform vec3 viewPos;

vec4 CalcDirLight(dirLight L, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(-L.direction);
	float diff = max(dot(normal, lightDir),0.0);
	vec3 reflectDir = reflect(-lightDir,normal);
	float spec = pow(max(dot(viewDir,-reflectDir),0.0), shininess);
	
	vec4 ambient = 0.1 * L.colour * matDiffuse;
	vec4 diffuse = L.colour * diff * matDiffuse;
	vec4 specular = L.colour * spec * matSpecular;

	float distance = length(L.position - fragPos);
	float attenuation = 1.0 / ((L.attenuation.x * distance * distance) + (L.attenuation.y * distance) + L.attenuation.z);

	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;

	return (ambient + diffuse + specular);
}

vec4 CalcPointLight(pointLight L, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(L.position - fragPos);
	float diff = max(dot(normal, lightDir),0.0);
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, -reflectDir),0.0), shininess);
	float distance = length(L.position - fragPos);
	float attenuation = 1.0 / ((L.attenuation.x * distance * distance) + (L.attenuation.y * distance) + L.attenuation.z);

	vec4 ambient = 0.1 * L.colour * matDiffuse;
	vec4 diffuse = L.colour * diff * matDiffuse;
	vec4 specular = L.colour * spec * matSpecular;

	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;

	return (ambient + diffuse + specular);
}

vec4 CalcSpotLight(spotLight L, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(L.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, -reflectDir), 0.0), shininess);
    // attenuation
    float distance = length(L.position - fragPos);
    float attenuation = 1.0 / ((L.attenuation.x * distance * distance) + (L.attenuation.y * distance) + L.attenuation.z);
    // spotlight intensity
    float theta = dot(lightDir, normalize(-L.direction)); 
    float epsilon = L.angle - L.outerAngle;
    float intensity = clamp((theta - L.outerAngle) / epsilon, 0.0, 1.0);
    // combine results
	vec4 ambient = 0.1 * L.colour * matDiffuse;
	vec4 diffuse = L.colour * diff * matDiffuse;
	vec4 specular = L.colour * spec * matSpecular;
    ambient *= attenuation * intensity;
    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;
    return (ambient + diffuse + specular);
}

void main()
{
	vec3 norm = normalize(Normal);
	vec3 viewDir = normalize(viewPos - FragPos);
	vec4 testVec = vec4(-1.0,-1.0,-1.0,-1.0);
	if (any(notEqual(DifCol,testVec)))
	{
		matDiffuse = DifCol;
	}
	else
	{
		matDiffuse = vec4(texture(DifTex, TexCoords));
	}

	if (any(notEqual(SpecCol,testVec)))
	{
		matDiffuse = SpecCol;
	}
	else
	{
		matDiffuse = vec4(texture(SpecTex, TexCoords));
	}

	vec4 result = vec4(0.0,0.0,0.0,0.0);
	for (int i=0; i < dirLightCount; i++)
		result += CalcDirLight(DLights[i], norm, FragPos, viewDir);

	for (int i=0; i < pointLightCount; i++)
		result += CalcPointLight(PLights[i], norm, FragPos, viewDir);
		
	for (int i=0; i < spotLightCount; i++)
		result += CalcSpotLight(SLights[i], norm, FragPos, viewDir);

	FragColor = result;
	//FragColor = shininess * vec4(1.0f,1.0f,1.0f,1.0f);
	//FragColor = matDiffuse;
}
